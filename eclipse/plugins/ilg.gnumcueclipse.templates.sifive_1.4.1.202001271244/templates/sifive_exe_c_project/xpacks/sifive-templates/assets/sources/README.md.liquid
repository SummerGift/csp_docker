# {{ boardDescription }} '{{ content }}' project

This project was generated by the GNU MCU Eclipse SiFive template.

## Application specific files

The application specific files are in the `src`, `include` and `ldscripts` folders. Edit them to implement the desired application functionality.

## Framework common packages

The _system_ files, common to many applications, are grouped in the `xpacks` folder. **xPacks** are separate small projects used as building blocks of modular applications.

Most of the xPacks are part of the [µOS++](http://micro-os-plus.github.io) project.

### Portable files

- `micro-os-plus-diag` - diagnostic trace functions
- `micro-os-plus-c-libs` - functions to complement the C library
- `micro-os-plus-cpp-libs` -  functions to complement the C++ library
- `micro-os-plus-startup` - portable startup
- `micro-os-plus-semihosting` - portable semihosting

### Architecture/device/board files

- `micro-os-plus-riscv-arch` RISC-V architecture files
- `sifive-devices` SiFive Core Complex IP devices files
{% if boardName == 'hifive1' -%}
- `sifive-hifive1-board` SiFive Freedom E310 HiFive1 files
{% elsif boardName == 'e31arty' or boardName == 'e51arty' -%}
- `arty-boards` SiFive Core Complex IP Arty FPGA files
{% endif -%}

## Debug

An OpenOCD debug launch file is automatically generated.

{% if boardName == 'hifive1' -%}
The HiFive1 board has an on board JTAG programmer. The OpenOCD configuration 
is available as a single file `-f "board/sifive-hifive1.cfg"`.

{% elsif boardName == 'e31arty' or boardName == 'e51arty' -%}
The Arty board has a JTAG hardware connection, and uses an external JTAG probe.
The debug session is configured to use the JTAG probe 
Olimex ARM-USB-TINY-H. For other probes, edit the launch configuration and
change the `-f "interface/ftdi/olimex-arm-usb-tiny-h.cfg"`, for example, for
Olimex ARM-USB-OCD, use `-f "interface/ftdi/olimex-arm-usb-ocd.cfg"`.

To see the complete list of probes supported, check the
OpenOCD binaries, the `scripts/interface` OpenOCD folder.

{% endif -%}
The referred files are available in the GNU MCU Eclipse OpenOCD distribution. 
If you use other distributions, you can get the files from [GitHub](https://github.com/gnu-mcu-eclipse/openocd/tree/gnu-mcu-eclipse-dev/tcl/board); download the `sifive-*.cfg` files and 
copy them in the `scripts/board` OpenOCD folder.

## Semihosting

Starting with GNU MCU Eclipse plug-ins 4.3.2, the SiFive Template project supports semihosting, both for trace output and for fully semihosted projects.

To run them, GNU MCU Eclipse OpenOCD 0.10.0-7 or later is required. Attempts to use older versions of OpenOCD will simply break into the debugger.

## Eclipse preferences

If you do not like the large number of source folders shown by Eclipse in the Project Explorer, you can go to Eclipse menu -> Preferences... -> C/C++ -> Appearance and disable **Show source roots at top of project**.

## License

Unless otherwise mentioned, all **µOS++** components are provided **free of charge** 
under the terms of the [MIT License](https://opensource.org/licenses/MIT) with all rights reserved to Liviu Ionescu.
